// Set the name of your grammar here (and at the end of this grammar):
COMPILER Alela

// Add auxiliary methods and declaration here.


// If you want your generated compiler case insensitive add the
// keyword IGNORECASE here.

    public ProgAST AST


CHARACTERS
// Add character set declarations here.
// Examples:
   letter = 'A'..'Z' + 'a'..'z'.
   digit = "0123456789".
   cr = '\r'.
   lf = '\n'.


TOKENS
// Add token declarations here.
// Example:
   
   ID = letter {letter | digit}.
   NUM = digit {digit}.

   
PRAGMAS
// Add pragma declarations here.
// Example:
//   switch = '$' { digit | letter }. (. Optional semantic action .)


// Add comments here.
// Example for a multi-line block comment:
//   COMMENTS FROM "/*" TO "*/" NESTED
// Example for a single line comment:
//   COMMENTS FROM "//" TO lf


// Set the ignored characters (whitespaces) here, the blank character is
// ignored by default.
// Example, add line breaks to the ignore set.
   IGNORE cr + lf


PRODUCTIONS

// Add your productions here, one must have the same name as the grammar,
// it will be the start symbol (entry point of your compiler).
// Example:
//   Empty = "BEGIN" { Statement } "END".
//   Statement = ident "=" number { "+" number } .

Alela = dcls lines
.

lines = {line ';'}
.

line = dcl
     | ID assig
.

dcls = dcl ';' [dcls]
.

dcl = type ID [assig]
.

assig =     (. Expr e; .)
    '=' expr<out e>
.

expr <out Expr e> = addExpr <out e>
.

addExpr <out Expr e> (. Operator op; Expr e2; .)
    = multExpr <out e> [addExprOp <out op, out e2>  (. e = new BinExpr(e, op, e2); .)] 
.

addExprOp <out Operator op, out Expr e2> 
    = '+' addExpr <out e2>  (. op = Operator.PLUS; .)
    | '-' addExpr <out e2> (. op = Operator.MINUS; .)
.

multExpr <out Expr e>   (. Operator op; Expr e2; .)
    = terminalExpr <out e> [multExprOp <out op, out e2>  (. e = new BinExpr(e, op, e2); .)]
.

multExprOp <out Operator op, out Expr e2>
    = '*' multExpr <out e2>  (. op = Operator.MULT; .)
    | '/' multExpr <out e2>  (. op = Operator.DIV; .)
    | '%' multExpr <out e2>  (. op = Operator.MOD; .)
.

terminalExpr <out Expr e>
    = value <out e>
    | '(' expr <out e> ')'  
.

value < out Expr e> = 
    NUM (. e = new IntValue(t.value); .)
    //| ID
.

type = "void"
     | "int"
     | "float"
     | "string"
     | "boolean"
.

// End of your compiler specification, make sure the name here matches
// the grammar name at the start of this grammar.
END Alela.

