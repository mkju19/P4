COMPILER ALELA

	public Prog ProgramAST;

CHARACTERS

   digit = "0123456789".
   letter = 'a'..'z' + 'A'..'Z'.
   AllUTF8 = ANY - '"'.
   cr = '\r'.
   lt = '\t'.
   lf = '\n'.


TOKENS
   
   intnumber = digit {digit}.
   floatnumber = digit {digit} '.' digit {digit}.
   id = letter {letter | digit | '_' | '-'}.
   true = "TRUE".
   false = "FALSE".
   //bool = ("TRUE" | "FALSE").
   stringtext = '"' {AllUTF8} '"'.
   newline = lf.
	


PRAGMAS
// Add comments here.
// Example for a multi-line block comment:
   COMMENTS FROM "/*" TO "*/" NESTED
// Example for a single line comment:
   COMMENTS FROM "//" TO lf

   IGNORE cr + lf + lt


PRODUCTIONS

	ALELA (. List<AST> astList = new List<AST>(); List<AST> nodeList = new List<AST>();
			AST e; SymDeclaring e1 = null; AST idval; .)
	= DECL <out e> (. astList.Add(e); .)
	{ DECL <out e> (. astList.Add(e); .) }
	"setup" BLOCK <out nodeList> (. astList.Add(new ProgSetup(nodeList)); .)
	"loop" BLOCK <out nodeList> (. astList.Add(new ProgLoop(nodeList)); .)
	{DCL <out e1, out idval> FUNCDECL <out e, e1> (. astList.Add(e); .)}
	(. ProgramAST = new Prog(astList); .).
    
	DECL <out AST e> (. SymDeclaring e1; AST e2 = null; StructDcel es = null;
	AST idval; List<AST> el = new List<AST>(); .)
	= DCL <out e1, out idval>
		[( ASSIG <out e2, idval> 
		| id (. AST structid = new SymReferencing(t.val); string idofstruct = t.val; .) ['{' STRUCTDECL <out el>]
			(. es = new StructDcel(idval, el); es.structId = structid; .)
			(. e2 = new Assigning(structid, es); e1.id = idofstruct;.))]
	(. e = new Decl(e1, e2); .)';'.

	DCL <out SymDeclaring e, out AST idval>
	= TYPE <out e> id (. idval = new SymReferencing(t.val); e.id = t.val; .).

	ASSIG <out AST e, AST idval> (. e = null; .)
	= ( '=' EXPR <out e>
	| '{' STRUCTDEF <out e, idval> )
	(. e = new Assigning(idval, e); .).

	STRUCTDEF <out AST eo, AST idval> (. List<AST> e2 = new List<AST>(); AST e; StructDef ed; .)
	= STRUCTFIELD <out e> (. e2.Add(e); .) {STRUCTFIELD <out e> (. e2.Add(e); .) } '}'
	(. ed = new StructDef(e2); ed.structType = idval; eo = ed; .).
	
	STRUCTFIELD <out AST eo> (. AST idval; SymDeclaring e; eo = null; .)
	= DCL <out e, out idval> (';' (. eo = e; .) | FUNCDECL <out eo, e> ).
    
	STRUCTDECL <.out List<AST> eo.> (. AST e; List<AST> e2 = new List<AST>(); .)
	= id (. AST idval = new SymReferencing(t.val); .) ASSIG <out e, idval> (. e2.Add(e); .)
	{',' id (. idval = new SymReferencing(t.val); .) ASSIG <out e, idval> (. e2.Add(e); .) } '}'
	(. eo = e2; .).

	BLOCK <. out List<AST> eo .> (. AST e; List<AST> e2 = new List<AST>(); .)
	= '{' {STMT <out e> (. e2.Add(e); .) } '}' (. eo = e2; .).

	STMT <out AST e>
	(. AST logi, n1, n2; List<AST> stm = new List<AST>();
	List<AST> stm2 = new List<AST>(); string id; AST astid; e = null; .)
	= "if" IFELSTMT <out e>
	| "while" '(' LOGI_EXPR <out logi> ')' BLOCK <out stm> (. e = new WhileStmt(logi, stm); .)
    | "for" '(' (. n1 = null; .) ( DECL <out n1> | id (. n1 = new SymReferencing(t.val); .) ';' ) LOGI_EXPR <out logi> ';' 
		id (. astid = new SymReferencing(t.val); .) ASSIG <out n2, astid> ')'
		BLOCK <out stm> (. e = new ForStmt(n1, logi, n2, stm); .)
    | "switch" '(' id (. id = t.val; .) ')'
		'{' "case" id (. id = t.val; .) ':' BLOCK <out stm2> (. stm.Add(new SwitchCase(id, stm2)); .)
		{ "case" id (. id = t.val; .) ':' BLOCK <out stm2> (. stm.Add(new SwitchCase(id, stm2)); .) }
		"default" ':' BLOCK <out stm2> (. stm.Add(new SwitchDefault(stm2)); .) '}'
		(. e = new SwitchStmt(id, stm); .)
    | IDENTIFIER <out e> CALL <e, out e> ';'
    | DECL <out e> .

	IFELSTMT <out AST e> (. List<AST> stm, stm2 = new List<AST>(); AST els = null; .)
	= '(' LOGI_EXPR <out AST logi> ')' BLOCK <out stm>
	[ "else" ( BLOCK <out stm2> (. els = new ElseStmt(stm2); .) | "if" IFELSTMT <out els> )]
	(. e = new IfStmt(logi, stm, els); .).

	CALL <AST id, out AST e> (. e = null; List<AST> stm = new List<AST>(); .)
	= FUNC <out stm> (. e = new FunctionStmt(id, stm); .)
	| ASSIG <out e, id>.

	VALUE <out AST e> (. e = null; List<AST> elist = new List<AST>(); .)
	= BOOL (. e = new BooleanConst(t.val); .)
	| intnumber (. e = new IntConst(t.val); .)
	| floatnumber (. e = new FloatConst(t.val); .)
	| stringtext (. e = new StringConst(t.val); .)
	| IDENTIFIER <out e> [FUNC <out elist> (. e = new FunctionStmt(e, elist); .)].
	
	BOOL
	= true
	| false.

	IDENTIFIER <out AST e> (. e = null; List<AST> elist = new List<AST>(); AST ei = null; .)
	= id (. string id = t.val; e = new SymReferencing(id); .)
		['.' IDENTIFIER <out ei> (. e = new DotReferencing(e, ei); .)].

	/*ARRAYCONST <out AST eo> (. List<AST> e2 = new List<AST>(); AST e; .)
	= '{' EXPR <out e> (. e2.Add(e); .) {',' EXPR <out e> (. e2.Add(e); .) } '}'
	(. eo = new ListConst(e2); .).*/

	FUNC <.out List<AST> eo.> (. AST v; List<AST> e = new List<AST>(); .)
	= '(' [EXPR <out v> (. e.Add(v); .) {',' EXPR <out v> (. e.Add(v); .)}] ')'
	(. eo = e; .).

	FUNCDECL <out AST eo, SymDeclaring e1> (. AST e = null; AST rv = null; SymDeclaring e11; List<SymDeclaring> e2 = new List<SymDeclaring>();  List<AST> e3 = new List<AST>(); .)
	= '(' [TYPE <out e11> id (. e11.id = t.val; e2.Add(e11); .) {',' TYPE <out e11> id (. e11.id = t.val;  e2.Add(e11);.)}] ')'
		'{' {STMT <out e> (. e3.Add(e); .) } ["return" EXPR <out rv> ';'] '}'
		(. eo = new FuncDecl(e1, e2, e3, rv); .).

	LOGI_EXPR <out AST e> 
	= LOGI_AND <out e> [LOGI_OR <e, out e>].
	
	LOGI_OR <AST e, out AST eo> (. string op; AST e2; .)
	= "||" (. op = t.val; .) LOGI_EXPR <out e2> (. eo = new LogiExpression(op, e, e2); .).
	
	LOGI_AND <out AST e>
	= LOGI_EQUAL <out e> [LOGI_ANDOp <e, out e>].

	LOGI_ANDOp <AST e, out AST eo> (. string op; AST e2; .)
	= "&&" (. op = t.val; .) LOGI_EQUAL <out e2> (. eo = new LogiExpression(op, e, e2); .).
	
	LOGI_EQUAL <out AST e>
	= LOGI_LG <out e> [LOGI_EQUALOp <e, out e>].

	LOGI_EQUALOp <AST e, out AST eo> (. string op; AST e2; .)
	= ( "==" | "!=" ) (. op = t.val; .) LOGI_LG <out e2> (. eo = new LogiExpression(op, e, e2); .).
	
	LOGI_LG <out AST e>
	= LOGI_NOT <out e> [LOGI_LGOp <e, out e>].
	
	LOGI_LGOp <AST e, out AST eo> (. string op; AST e2; .)
	= ( ">=" | '>' | "<=" | '<' ) (. op = t.val; .) LOGI_NOT <out e2> (. eo = new LogiExpression(op, e, e2); .).
	
	LOGI_NOT <out AST e> (. AST e2; e = null; .)
	= '!' LOGI_NOT <out e2> (. e = new NotExpression(e2); .)
	| LOGI_TERM <out e>.
	
	LOGI_TERM <out AST e> (. e = null; .)
	= EXPR <out e>
	/*| VALUE <out e>
	| '(' LOGI_EXPR <out e> ')'*/.

	EXPR <out AST e>
	= multExpr <out e> [addExpr <e, out e>].
	
	addExpr <AST e, out AST eo> (. string op; AST e2; .) 
	= ( '+' | '-' ) (. op = t.val; .) EXPR <out e2> (. eo = new Expression(op, e, e2); .).

	multExpr <out AST e> 
	= terminalExpr <out e> [multExprOp <e, out e>].

	multExprOp <AST e, out AST eo> (. string op; AST e2; .) 
	= ( '*' | '/' | '%' ) (. op = t.val; .) multExpr <out e2> (. eo = new Expression(op, e, e2); .).

	terminalExpr <out AST e> (. e = null; .)
	= VALUE <out e>
	| '(' LOGI_EXPR <out e> ')'.

	TYPE <out SymDeclaring e> (. e = null; SymDeclaring lt = null; .)
	= "void" (. e = new VoidDcl(); .)
	| "int" (. e = new IntDcl(); .)
    | "float" (. e = new FloatDcl(); .)
    | "string" (. e = new StringDcl(); .)
    | "boolean" (. e = new BooleanDcl(); .)
	| "struct" (. e = new StructDcl(); .)
	| "List" '<' TYPE <out lt> '>' (. e = new ListDcl(lt); .).

END ALELA.