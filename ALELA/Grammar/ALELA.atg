COMPILER ALELA

	public Prog ProgramAST;

CHARACTERS

   digit = "0123456789".
   letter = 'a'..'z' + 'A'..'Z'.
   AllUTF8 = ANY - '"'.
   cr = '\r'.
   lt = '\t'.
   lf = '\n'.


TOKENS
   
   intnumber = digit {digit}.
   floatnumber = digit {digit} '.' digit {digit}.
   id = letter {letter | digit}.
   stringtext = '"' {AllUTF8} '"'.
   newline = lf.
	


PRAGMAS
// Add comments here.
// Example for a multi-line block comment:
   COMMENTS FROM "/*" TO "*/" NESTED
// Example for a single line comment:
   COMMENTS FROM "//" TO lf

   IGNORE cr + lf + lt


PRODUCTIONS

	ALELA (. List<AST> liste = new List<AST>(); List<AST> elist = new List<AST>(); AST e;.)
	= DECL <out e> (. liste.Add(e); .)
	{ DECL <out e> (. liste.Add(e); .) }
	"setup" BLOCK <out elist> (. liste.Add(new ProgSetup(elist)); .)
	"loop" BLOCK <out elist> (. liste.Add(new ProgLoop(elist)); .)
	{FUNCDECL <out e> (. liste.Add(e); .)}
	(. ProgramAST = new Prog(liste); .).
    
	DECL <out AST e> (. SymDeclaring e1; AST e2 = null; .)
	= TYPE <out e1> id (. string idval = t.val; e1.id = idval; .) [ASSIG <out e2, idval>]
	(. e = new Decl(e1, e2); .)';'.

	ASSIG <out AST e, string idval> (. e = null; .)
	= '=' ( EXPR <out e> | stringtext (. e = new StringConst(t.val); .) )
	(. e = new Assigning(idval, e); .).

	/*STRUCTDEF
	= "struct" STRUCTID '{' STRUCTFIELD {STRUCTFIELD} '}'.
	
	STRUCTFIELD 
	= TYPE id ';'
	| FUNC.
    
	STRUCTDECL 
	= STRUCTID id '=' '{' FIELDINIT {',' FIELDINIT} '}'.
    
	FIELDINIT 
	= id '=' expr.

	STRUCTID 
	= id.*/

	BLOCK <. out List<AST> eo .> (. AST e; List<AST> e2 = new List<AST>(); .)
	= '{' {STMT <out e> (. e2.Add(e); .) } '}' (. eo = e2; .).

	STMT <out AST e>
	(. AST logi, n1, n2; List<AST> stm = new List<AST>();
	List<AST> stm2 = new List<AST>(); string id; e = null; .)
	= "if" IFELSTMT <out e>
	| "while" '(' LOGI_EXPR <out logi> ')' BLOCK <out stm> (. e = new WhileStmt(logi, stm); .)
    | "for" '(' (. n1 = null; .) ( DECL <out n1> | id (. n1 = new SymReferencing(t.val); .) ';' ) LOGI_EXPR <out logi> ';' id (. id = t.val; .) ASSIG <out n2, id> ')'
		BLOCK <out stm> (. e = new ForStmt(n1, logi, n2, stm); .)
    | "switch" '(' id (. id = t.val; .) ')'
		'{' "case" id (. id = t.val; .) ':' BLOCK <out stm2> (. stm.Add(new SwitchCase(id, stm2)); .)
		{ "case" id (. id = t.val; .) ':' BLOCK <out stm2> (. stm.Add(new SwitchCase(id, stm2)); .) }
		"default" ':' BLOCK <out stm2> (. stm.Add(new SwitchDefault(stm2)); .) '}'
		(. e = new SwitchStmt(id, stm); .)
    | id (. id = t.val; .) CALL <id, out e> ';'
    | DECL <out e> .

	IFELSTMT <out AST e> (. List<AST> stm, stm2 = new List<AST>(); AST els = null; .)
	= '(' LOGI_EXPR <out AST logi> ')' BLOCK <out stm>
	[ "else" ( BLOCK <out stm2> (. els = new ElseStmt(stm2); .) | "if" IFELSTMT <out els> )]
	(. e = new IfStmt(logi, stm, els); .).

	CALL <string id, out AST e> (. e = null; List<AST> stm = new List<AST>(); .)
	= FUNC <out stm> (. e = new FunctionStmt(id, stm); .)
	| ASSIG <out e, id>.

	VALUE <out AST e> (. e = null; List<AST> elist = new List<AST>(); .)
	= intnumber (. e = new IntConst(t.val); .)
	| floatnumber (. e = new FloatConst(t.val); .)
	| id (. string id = t.val; e = new SymReferencing(id); .)
	[FUNC <out elist> (. e = new FunctionStmt(id, elist); .) ].

	FUNC <.out List<AST> eo.> (. AST v; List<AST> e = new List<AST>(); .)
	= '(' [VALUE <out v> (. e.Add(v); .) {',' VALUE <out v> (. e.Add(v); .)}] ')'
	(. eo= e; .).

	FUNCDECL <out AST e> (. SymDeclaring e1 ,e11; List<SymDeclaring> e2 = new List<SymDeclaring>();  List<AST> e3 = new List<AST>(); .)
	= TYPE <out e1> id (. string idval = t.val; e1.id = idval; .)
	'(' [TYPE <out e11> id (. e11.id = t.val; e2.Add(e11); .) {',' TYPE <out e11> id (. e11.id = t.val;  e2.Add(e11);.)}] ')' BLOCK <out e3>
	(. e = new FuncDecl(e1, e2, e3); .). // may need extra id

	LOGI_EXPR <out AST e> 
	= LOGI_AND <out e> [LOGI_OR <e, out e>].
	
	LOGI_OR <AST e, out AST eo> (. string op; AST e2; .)
	= "||" (. op = t.val; .) LOGI_EXPR <out e2> (. eo = new Expression(op, e, e2); .).
	
	LOGI_AND <out AST e>
	= LOGI_EQUAL <out e> [LOGI_ANDOp <e, out e>].

	LOGI_ANDOp <AST e, out AST eo> (. string op; AST e2; .)
	= "&" (. op = t.val; .) LOGI_EQUAL <out e2> (. eo = new Expression(op, e, e2); .).
	
	LOGI_EQUAL <out AST e>
	= LOGI_LG <out e> [LOGI_EQUALOp <e, out e>].

	LOGI_EQUALOp <AST e, out AST eo> (. string op; AST e2; .)
	= ( "==" | "!=" ) (. op = t.val; .) LOGI_LG <out e2> (. eo = new Expression(op, e, e2); .).
	
	LOGI_LG <out AST e>
	= LOGI_NOT <out e> [LOGI_LGOp <e, out e>].
	
	LOGI_LGOp <AST e, out AST eo> (. string op; AST e2; .)
	= ( ">=" | '>' | "<=" | '<' ) (. op = t.val; .) LOGI_NOT <out e2> (. eo = new Expression(op, e, e2); .).
	
	LOGI_NOT <out AST e> (. AST e2; e = null; .)
	= '!' LOGI_NOT <out e2> (. e = new NotExpression(e2); .)
	| LOGI_TERM <out e>.
	
	LOGI_TERM <out AST e> (. e = null; .)
	= VALUE <out e>
	| '(' LOGI_EXPR <out e> ')'.

	EXPR <out AST e>
	= multExpr <out e> [addExpr <e, out e>].
	
	addExpr <AST e, out AST eo> (. string op; AST e2; .) 
	= ( '+' | '-' ) (. op = t.val; .) EXPR <out e2> (. eo = new Expression(op, e, e2); .).

	multExpr <out AST e> 
	= terminalExpr <out e> [multExprOp <e, out e>].

	multExprOp <AST e, out AST eo> (. string op; AST e2; .) 
	= ( '*' | '/' | '%' ) (. op = t.val; .) multExpr <out e2> (. eo = new Expression(op, e, e2); .).

	terminalExpr <out AST e> (. e = null; .)
	= VALUE <out e>
	| '(' EXPR <out e> ')'.

	/*LIST 
	= "List"'<' TYPE '>' id '=' '{' VALUE {',' VALUE} '}'.*/

	TYPE <out SymDeclaring e> (. e = null; .)
	= "void" (. e = new VoidDcl(); .)
	| "int" (. e = new IntDcl(); .)
    | "float" (. e = new FloatDcl(); .)
    | "string" (. e = new StringDcl(); .)
    | "boolean" (. e = new BooleanDcl(); .).

END ALELA.